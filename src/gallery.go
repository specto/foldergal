package main

import (
	"bytes"
	"compress/gzip"
	"errors"
	"github.com/disintegration/imaging"
	"github.com/spf13/afero"
	"image"
	_ "image/gif"
	"image/jpeg"
	_ "image/png"
	"io"
	"mime"
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"time"
)

const (
	ThumbWidth  = 200
	ThumbHeight = 200
)

type media interface {
	media() *mediaFile // Expose our basic data structure in interface
	thumb() *afero.File
	thumbExists() bool
	thumbGenerate() error
	thumbExpired() bool

	file() *afero.File
	fileExists() bool
}

////////////////////////////////////////////////////////////////////////////////
type mediaFile struct {
	fullPath  string
	fileInfo  os.FileInfo
	thumbPath string
	thumbInfo os.FileInfo
}

func (f *mediaFile) media() *mediaFile {
	return f
}

func (f *mediaFile) file() *afero.File {
	file, err := RootFs.Open(f.fullPath)
	if err != nil {
		return nil
	}
	return &file
}

func (f *mediaFile) fileExists() (exists bool) {
	var err error
	exists, err = afero.Exists(RootFs, f.fullPath)
	// Ensure we refresh file stat
	f.fileInfo, err = RootFs.Stat(f.fullPath)
	if err != nil {
		return false
	}
	return
}

////////////////////////////////////////////////////////////////////////////////
type imageFile struct {
	mediaFile
}

func (f *imageFile) thumb() *afero.File {
	if !f.thumbExists() {
		return nil
	}
	file, err := CacheFs.Open(f.thumbPath)
	if err != nil {
		return nil
	}
	return &file
}

func (f *imageFile) thumbExists() (exists bool) {
	exists, _ = afero.Exists(CacheFs, f.thumbPath)
	// Ensure we refresh thumb stat
	f.media().thumbInfo, _ = CacheFs.Stat(f.thumbPath)
	return
}

func (f *imageFile) thumbExpired() (expired bool) {
	if !f.thumbExists() {
		return true
	}
	m := f.media()
	diff := m.thumbInfo.ModTime().Sub(m.fileInfo.ModTime())
	return diff < 0*time.Second
}

func (f *imageFile) thumbGenerate() (err error) {
	var (
		file afero.File
		img  image.Image
	)
	file, err = RootFs.Open(f.fullPath)
	defer func() { _ = file.Close() }()
	if err != nil {
		return
	}
	img, err = imaging.Decode(file, imaging.AutoOrientation(true))
	if err != nil {
		return
	}
	resized := imaging.Fit(img, ThumbWidth, ThumbHeight, imaging.Lanczos)
	buf := new(bytes.Buffer)
	err = jpeg.Encode(buf, resized, nil)
	if err != nil {
		return
	}
	err = CacheFs.MkdirAll(filepath.Dir(f.thumbPath), os.ModePerm)
	if err != nil {
		return
	}
	_, err = CacheFs.Create(f.thumbPath)
	if err != nil {
		return
	}
	_ = afero.WriteFile(CacheFs, f.thumbPath, buf.Bytes(), os.ModePerm)
	f.media().thumbInfo, err = CacheFs.Stat(f.thumbPath)
	return
}

////////////////////////////////////////////////////////////////////////////////
type svgFile struct {
	mediaFile
}

func (f *svgFile) thumb() *afero.File {
	if !f.thumbExists() {
		return nil
	}
	file, err := CacheFs.Open(f.thumbPath)
	if err != nil {
		return nil
	}
	return &file
}

func (f *svgFile) thumbExists() (exists bool) {
	exists, _ = afero.Exists(CacheFs, f.thumbPath)
	// Ensure we refresh thumb stat
	f.media().thumbInfo, _ = CacheFs.Stat(f.thumbPath)
	return
}

func (f *svgFile) thumbExpired() (expired bool) {
	if !f.thumbExists() {
		return true
	}
	m := f.media()
	diff := m.thumbInfo.ModTime().Sub(m.fileInfo.ModTime())
	return diff < 0*time.Second
}

func (f *svgFile) thumbGenerate() (err error) {
	var (
		file     afero.File
		contents []byte
	)
	file, err = RootFs.Open(f.fullPath)
	defer func() { _ = file.Close() }()
	if err != nil {
		return
	}
	contents, err = afero.ReadAll(file)
	if err != nil {
		return
	}
	err = CacheFs.MkdirAll(filepath.Dir(f.thumbPath), os.ModePerm)
	if err != nil {
		return
	}
	_, err = CacheFs.Create(f.thumbPath)
	if err != nil {
		return
	}
	err = afero.WriteFile(CacheFs, f.thumbPath, contents, os.ModePerm)
	if err != nil {
		return
	}
	// Since we just copy SVGs the thumb file is the same as the original
	f.thumbPath = f.fullPath
	f.media().thumbInfo, err = CacheFs.Stat(f.thumbPath)
	return
}

////////////////////////////////////////////////////////////////////////////////
type audioFile struct {
	mediaFile
}

func (f *audioFile) thumb() *afero.File {
	thumb, _ := memoryFs.Open("audio.svg")
	return &thumb
}

func (f *audioFile) thumbExists() (exists bool) {
	var err error
	exists, err = afero.Exists(memoryFs, "audio.svg")
	if err != nil {
		return false
	}
	f.media().thumbInfo, err = memoryFs.Stat("audio.svg")
	if err != nil {
		return false
	}
	return
}

func (f *audioFile) thumbExpired() (expired bool) {
	return true
}

func (f *audioFile) thumbGenerate() (err error) {
	_ = f.thumbExists()
	return
}

////////////////////////////////////////////////////////////////////////////////
type videoFile struct {
	mediaFile
}

func (f *videoFile) thumb() *afero.File {
	thumb, _ := memoryFs.Open("video.svg")
	return &thumb
}

func (f *videoFile) thumbExists() (exists bool) {
	var err error
	exists, err = afero.Exists(memoryFs, "video.svg")
	if err != nil {
		return false
	}
	f.media().thumbInfo, err = memoryFs.Stat("video.svg")
	if err != nil {
		return false
	}
	return
}

func (f *videoFile) thumbExpired() (expired bool) {
	return true
}

func (f *videoFile) thumbGenerate() (err error) {
	if !f.thumbExists() {
		return errors.New("no video thumbnail")
	}
	return
}

////////////////////////////////////////////////////////////////////////////////
type pdfFile struct {
	mediaFile
}

func (f *pdfFile) thumb() *afero.File {
	thumb, _ := memoryFs.Open("pdf.svg")
	return &thumb
}

func (f *pdfFile) thumbExists() (exists bool) {
	var err error
	exists, err = afero.Exists(memoryFs, "pdf.svg")
	if err != nil {
		return false
	}
	f.media().thumbInfo, err = memoryFs.Stat("pdf.svg")
	if err != nil {
		return false
	}
	return
}

func (f *pdfFile) thumbExpired() (expired bool) {
	return true
}

func (f *pdfFile) thumbGenerate() (err error) {
	if !f.thumbExists() {
		return errors.New("no video thumbnail")
	}
	return
}

////////////////////////////////////////////////////////////////////////////////

func containsDotFile(name string) bool {
	parts := strings.Split(name, "/")
	for _, part := range parts {
		if strings.HasPrefix(part, ".") {
			return true
		}
	}
	return false
}

var mimePrefixes = regexp.MustCompile("^(image|video|audio|application/pdf)")

func validMediaByExtension(name string) bool {
	ext := filepath.Ext(name)
	contentType := mime.TypeByExtension(ext)
	match := mimePrefixes.FindStringSubmatch(contentType)
	return match != nil
}

type embeddedFileId int

const (
	brokenImage = iota + 1
	folderImage
	upImage
	audioImage
	videoImage
	pdfImage
	faviconImage
	css
)

var embeddedFiles = make(map[embeddedFileId][]byte)

var memoryFs afero.Fs

func unzip(data []byte) (out []byte, err error) {
	var (
		gz  *gzip.Reader
		buf bytes.Buffer
	)
	gz, err = gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return
	}
	_, err = io.Copy(&buf, gz)
	if err != nil {
		return
	}
	err = gz.Close()
	if err != nil {
		return
	}
	return buf.Bytes(), nil
}

func init() {
	embeddedFiles[brokenImage] = []byte(`<?xml version="1.0" encoding="utf-8"?>
		<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
			 viewBox="0 0 1024 768" style="enable-background:new 0 0 1024 768;" xml:space="preserve">
		<style type="text/css">
			.st0{fill:#FFFFFF;stroke:#999999;stroke-width:64;stroke-miterlimit:10;}
			.st1{fill:none;stroke:#999999;stroke-width:64;stroke-miterlimit:10;}
		</style>
		<rect x="151" y="96" class="st0" width="722" height="576"/>
		<line class="st1" x1="272.5" y1="367" x2="442.5" y2="197"/>
		<line class="st1" x1="272.5" y1="197" x2="442.5" y2="367"/>
		<line class="st1" x1="581.5" y1="367" x2="751.5" y2="197"/>
		<line class="st1" x1="581.5" y1="197" x2="751.5" y2="367"/>
		<path class="st1" d="M614.26,590c0-37-44.89-78-100.26-78s-100.26,41-100.26,78"/>
		</svg>`)
	embeddedFiles[folderImage] = []byte(`<?xml version="1.0" encoding="utf-8"?>
		<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
		viewBox="0 0 1024 768" style="enable-background:new 0 0 1024 768;" xml:space="preserve">
		<style type="text/css">
		.st0{fill:#FFFFFF;stroke:#000000;stroke-width:64;stroke-miterlimit:10;}
		</style>
		<path class="st0" d="M849.9,678.5H174.1c-27.39,0-49.6-22.21-49.6-49.6V139.1c0-27.39,22.21-49.6,49.6-49.6h199.97l24.29,80H849.9
		c27.39,0,49.6,22.21,49.6,49.6v409.8C899.5,656.29,877.29,678.5,849.9,678.5z"/>
		</svg>`)
	embeddedFiles[upImage] = []byte(`<?xml version="1.0" encoding="utf-8"?>
		<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
			 viewBox="0 0 1024 768" style="enable-background:new 0 0 1024 768;" xml:space="preserve">
		<style type="text/css">
			.st0{fill:#FFFFFF;stroke:#000000;stroke-width:64;stroke-miterlimit:10;}
			.st1{fill:none;stroke:#000000;stroke-width:64;stroke-miterlimit:10;}
		</style>
		<path class="st0" d="M849.9,678.5H174.1c-27.39,0-49.6-22.21-49.6-49.6V139.1c0-27.39,22.21-49.6,49.6-49.6h199.97l24.29,80H849.9
			c27.39,0,49.6,22.21,49.6,49.6v409.8C899.5,656.29,877.29,678.5,849.9,678.5z"/>
		<polyline class="st1" points="434,385.79 434,541.45 693,541.45 		"/>
		<polygon points="570.06,404.03 297.94,404.03 434,268 			"/>
		</svg>`)
	embeddedFiles[audioImage] = []byte(`<?xml version="1.0" encoding="utf-8"?>
		<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
			 viewBox="0 0 1024 768" style="enable-background:new 0 0 1024 768;" xml:space="preserve">
		<style type="text/css">
			.st0{fill:#FFFFFF;stroke:#999999;stroke-width:64;stroke-miterlimit:10;}
		</style>
		<path class="st0" d="M849.9,678.5H174.1c-27.4,0-49.6-22.2-49.6-49.6V139.1c0-27.4,22.2-49.6,49.6-49.6h200h24.3h451.5
			c27.4,0,49.6,22.2,49.6,49.6v489.8C899.5,656.3,877.3,678.5,849.9,678.5z"/>
		<path d="M511,212.7c-104.2,0-189,84.8-189,189v63c0,26,6.5,51.8,18.8,74.6c1.4,2.5,4,4.1,6.9,4.1h38.7c3.3,9.1,11.9,15.7,22.2,15.7
			c13,0,23.6-10.6,23.6-23.6V393.9c0-13-10.6-23.6-23.6-23.6c-10.3,0-18.9,6.6-22.2,15.7h-38.7c-2.9,0-5.6,1.6-6.9,4.1
			c-1,1.9-1.8,4-2.7,6c1.4-42.7,18.3-81.5,45.2-111l16.4,16.4c3.1,3.1,8.1,3.1,11.1,0C437.5,274.7,473.1,260,511,260
			s73.5,14.8,100.2,41.5c1.5,1.5,3.6,2.3,5.6,2.3s4-0.8,5.6-2.3l16.4-16.4c27,29.5,43.8,68.3,45.2,111c-1-2-1.7-4-2.7-6
			c-1.4-2.5-4-4.1-6.9-4.1h-38.7c-3.3-9.1-11.9-15.7-22.2-15.7c-13,0-23.6,10.6-23.6,23.6v141.8c0,13,10.6,23.6,23.6,23.6
			c10.3,0,18.9-6.6,22.2-15.7h38.7c2.9,0,5.6-1.6,6.9-4.1c12.3-22.8,18.8-48.6,18.8-74.6v-63C700,297.5,615.2,212.7,511,212.7z"/>
		</svg>`)
	embeddedFiles[videoImage] = []byte(`<?xml version="1.0" encoding="utf-8"?>
		<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
			 viewBox="0 0 1024 768" style="enable-background:new 0 0 1024 768;" xml:space="preserve">
		<style type="text/css">
			.st0{fill:#FFFFFF;stroke:#999999;stroke-width:64;stroke-miterlimit:10;}
		</style>
		<path class="st0" d="M849.9,678.5H174.1c-27.4,0-49.6-22.2-49.6-49.6V139.1c0-27.4,22.2-49.6,49.6-49.6h200h24.3h451.5
			c27.4,0,49.6,22.2,49.6,49.6v489.8C899.5,656.3,877.3,678.5,849.9,678.5z"/>
		<path d="M716,289.9l-124,56.4v-57.8c0-23-18.6-41.6-41.6-41.6H349.6c-23,0-41.6,18.6-41.6,41.6v194.8c0,23,18.6,41.6,41.6,41.6
			h200.8c23,0,41.6-18.6,41.6-41.6v-77l124,61.6V289.9z"/>
		</svg>`)
	embeddedFiles[pdfImage] = []byte(`<?xml version="1.0" encoding="utf-8"?>
		<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
			 viewBox="0 0 1024 768" style="enable-background:new 0 0 1024 768;" xml:space="preserve">
		<style type="text/css">
			.st0{fill:#FFFFFF;stroke:#999999;stroke-width:64;stroke-miterlimit:10;}
			.st1{fill:#D61716;}
			.st2{fill:#878482;}
			.st3{fill:#54504F;}
			.st4{fill:#FFFFFF;}
		</style>
		<path class="st0" d="M849.9,678.5H174.1c-27.4,0-49.6-22.2-49.6-49.6V139.1c0-27.4,22.2-49.6,49.6-49.6h200h24.3h451.5
			c27.4,0,49.6,22.2,49.6,49.6v489.8C899.5,656.3,877.3,678.5,849.9,678.5z"/>
		<path class="st1" d="M720.2,457.2c-0.3-3.1-3.1-38.7-66.4-37.2c-63.3,1.5-78.7,5.5-78.7,5.5s-47.3-47.9-64.5-85.1
			c0,0,20.9-61.2,20-99.6c-0.9-38.4-10.1-60.5-39.6-60.2c-29.5,0.3-33.8,26.1-29.9,64.6c3.5,34.5,21.3,75,21.3,75
			s-13.6,42.4-31.7,84.6c-18,42.2-30.3,64.3-30.3,64.3s-61,20.4-87.4,45c-26.4,24.6-37.2,43.5-23.3,62.4c12,16.3,54,20,91.5-29.2
			c37.5-49.2,54.4-79.9,54.4-79.9s57.2-15.7,75-20c17.8-4.3,39.3-7.7,39.3-7.7s52.2,52.6,102.7,50.7
			C723,488.6,720.6,460.3,720.2,457.2 M322.9,568.2c-31.4-18.7,65.8-76.5,83.3-78.4C406.2,489.8,355.7,587.8,322.9,568.2z M471.9,231
			c0-30.4,9.8-38.7,17.5-38.7c7.7,0,16.3,3.7,16.6,30.1c0.3,26.4-16.6,78.1-16.6,78.1C483.6,294.3,471.9,261.4,471.9,231z
			 M512.4,439.4c-31.4,7.7-47.2,15.7-47.2,15.7s0,0,12.9-28.9s26.1-68.2,26.1-68.2c17.8,33.2,53.2,72.2,53.2,72.2
			S543.8,431.7,512.4,439.4z M588,436.7c0,0,102.2-18.5,102.2,16.4C690.2,488,626.9,473.8,588,436.7z"/>
		<g>
			<polyline class="st2" points="156.9,184.3 62.4,184.3 62.4,273.3 359.8,273.3 359.8,184.3 156.9,184.3 	"/>
			<rect x="64.3" y="182.7" class="st1" width="297.1" height="89.1"/>
			<g>
				<g>
					<path class="st3" d="M217.4,227.7c-0.4,0-0.8,0-1.2,0v-19.3h2.5c2.9,0,4.7,0.9,6,2.4c1.6,1.8,2.4,5,2.4,7.3c0,3.2,0,6.1-2.9,8.2
						C222.6,227.3,220.1,227.7,217.4,227.7 M219.8,197.8c-0.1,0-0.3,0-0.4,0c-1.3,0-2.2,0-2.7,0h-13.9v62.6h13.4v-21.2l3,0.2
						c3.1,0,5.9-0.7,8.4-1.5c2.5-0.8,4.6-2.2,6.4-3.8c1.8-1.6,3.5-3.6,4.4-5.9c1.4-3.5,1.7-8.4,1.4-11.8c-0.4-3.4-0.5-6.2-1.5-8.4
						c-1-2.2-2.3-4-3.8-5.4c-1.6-1.4-3.3-2.4-5.1-3.1c-1.9-0.7-3.6-1.1-5.4-1.4C222.4,197.9,221.1,197.8,219.8,197.8"/>
					<path class="st4" d="M216.4,226.7c-0.4,0-0.8,0-1.2,0v-19.3h2.5c2.9,0,4.7,0.9,6,2.4c1.6,1.8,2.4,5,2.4,7.3c0,3.2,0,6.1-2.9,8.2
						C221.6,226.3,219.1,226.7,216.4,226.7 M218.8,196.8c-0.1,0-0.3,0-0.4,0c-1.3,0-2.2,0-2.7,0h-13.9v62.6h13.4v-21.2l3,0.2
						c3.1,0,5.9-0.7,8.4-1.5c2.5-0.8,4.6-2.2,6.4-3.8c1.8-1.6,3.5-3.6,4.4-5.9c1.4-3.5,1.7-8.4,1.4-11.8c-0.4-3.4-0.5-6.2-1.5-8.4
						c-1-2.2-2.3-4-3.8-5.4c-1.6-1.4-3.3-2.4-5.1-3.1c-1.9-0.7-3.6-1.1-5.4-1.4C221.4,196.9,220.1,196.8,218.8,196.8"/>
				</g>
				<g>
					<path class="st3" d="M262.8,248.9c-0.4,0-0.8,0-1.3,0V209c0.1,0,0.1,0,0.2,0c2.7,0,6.1,0,7.8,1.4c1.8,1.4,3.2,3.2,4.2,5.2
						c1,2.1,1.7,4.4,1.8,6.9c0.1,2.9,0,5.2,0,7.2c0,1.9,0,4.3-0.4,6.7c-0.4,2.4-1.2,4.5-2.2,6.6c-1.1,2-3,3.4-4.7,4.7
						C266.8,248.6,265,248.9,262.8,248.9 M265.2,197.6c-1.4,0-2.9,0.1-3.8,0.1c-1.7,0.1-2.7,0.1-3.1,0.1h-10.2v62.6h12
						c5.3,0,9.7-0.8,13.4-2.3c3.7-1.5,6.6-3.7,8.9-6.4c2.2-2.7,3.9-6,4.9-9.8c1-3.8,1.5-7.9,1.5-12.4c0-5.8,0-10.3-1.1-14.7
						c-1-4-3.1-7.2-5.3-9.6c-2.1-2.4-4.5-4.1-7-5.2c-2.5-1.1-4.9-1.9-7.2-2.3C267.3,197.7,266.2,197.6,265.2,197.6"/>
					<path class="st4" d="M261.8,247.9c-0.4,0-0.8,0-1.3,0V208c0.1,0,0.1,0,0.2,0c2.7,0,6.1,0,7.8,1.4c1.8,1.4,3.2,3.2,4.2,5.2
						c1,2.1,1.7,4.4,1.8,6.9c0.1,2.9,0,5.2,0,7.2c0,1.9,0,4.3-0.4,6.7c-0.4,2.4-1.2,4.5-2.2,6.6c-1.1,2-3,3.4-4.7,4.7
						C265.8,247.6,264,247.9,261.8,247.9 M264.2,196.6c-1.4,0-2.9,0.1-3.8,0.1c-1.7,0.1-2.7,0.1-3.1,0.1h-10.2v62.6h12
						c5.3,0,9.7-0.8,13.4-2.3c3.7-1.5,6.6-3.7,8.9-6.4c2.2-2.7,3.9-6,4.9-9.8c1-3.8,1.5-7.9,1.5-12.4c0-5.8,0-10.3-1.1-14.7
						c-1-4-3.1-7.2-5.3-9.6c-2.1-2.4-4.5-4.1-7-5.2c-2.5-1.1-4.9-1.9-7.2-2.3C266.3,196.7,265.2,196.6,264.2,196.6"/>
				</g>
				<g>
					<polyline class="st3" points="329.1,197.8 297.4,197.8 297.4,260.5 310.8,260.5 310.8,235.6 327.7,235.6 327.7,224 310.8,224 
						310.8,209.5 329.1,209.5 329.1,197.8 			"/>
					<polyline class="st4" points="328.1,196.8 296.4,196.8 296.4,259.5 309.8,259.5 309.8,234.6 326.7,234.6 326.7,223 309.8,223 
						309.8,208.5 328.1,208.5 328.1,196.8 			"/>
				</g>
			</g>
		</g>
		</svg>`)
	embeddedFiles[css] = []byte(`body
    {
        font-family: sans-serif;
        color: black;
        background: #EDEDED;
    }

    a
    {
        text-decoration: none;
        border-radius: 0.5em;
    }

    a.media { background: white; }
    a:hover { background-color: #D6D6D6; }

    a:active
    {
        background-color: #D1DDF0;
        color: darkred;
    }

    body > header a
    {
        color: black;
        display: inline-block;
        border-radius: 0;
        border-bottom-width: 2px;
        border-bottom-style: dotted;
        border-bottom-color: transparent;
        padding-right: 0.2em;
		max-width: 18em;
		overflow: hidden;
		white-space: nowrap; 
 		text-overflow: ellipsis;
    }
	body > header span {
		overflow: hidden;
		display: inline-block;
		white-space: nowrap;
	}

    body > header a:hover
    {
        border-bottom-color: black;
        background: none;
    }

    body > header a:active { border-bottom-color: darkred; }

    body > header a::after
    {
        content: ' \005C';
        display: inline-block;
        padding-left: 0.2em;
    }

    body > header a:last-child { padding: 0; }
    body > header a:first-child::after,
    body > header a:last-child::after { content: ''; }
    body > header a:only-child::after { padding: 0; }

    body > footer
    {
        margin: 2em 1em;
        padding-top: 0.5em;
        color: gray;
        font-size: 0.8em;
        text-align: right;
    }

    body > footer::before
    {
        content: '…(˶‾᷄ ⁻̫ ‾᷅˵)…';
        display: block;
    }

    main ul
    {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        flex-direction: row;
        padding: 0;
        margin: 0;
    }

    main li
    {
        display: flex;
        padding: 0.25em;
        margin: 0;
        list-style: none;
        align-items: center;
    }

    main a
    {
        width: 10em;
        min-height: 7em;
        display: flex;
        padding: 0.5em;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: black;
    }

    main a span
    {
        display: flex;
        flex-grow: 1;
        overflow-wrap: break-word;
        word-break: break-all;
        text-align: center;
        align-items: center;
        justify-content: center;
    }

    main a img
    {
        max-height: 10em;
        width: 10em;
        object-fit: contain;
        object-position: center bottom;
        display: inline-block;
    }

    main .author-container, main .title-container { position: relative; }

    main .author,
    main .title
    {
        position: absolute;
        right: 0;
        bottom: 0;
        display: inline-block;
        color: white;
        font-size: 0.8em;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    main .author
    {
        padding-right: 0.4em;
        width: 3.1em;
        text-align: right;
        z-index: 10;
    }

    main .title
    {
        left: 0;
        padding-right: 0.4em;
        padding-left: 0.4em;
        width: 13em;
        background: rgba(0, 0, 0, 0.6);
        border-radius: 0 0 0.5em 0.5em;
        text-align: left;
        z-index: 5;
    }

    main .author-container .title
    {
        width: 10.4em;
        padding-right: 3em;
    }

    main .folder .title
    {
        background: none;
        color: black;
        text-align: center;
        padding: 0.4em 0 0.4em 0;
        width: 13.5em;
    }

    main .big a
    {
        width: 18em;
        min-height: 14em;
    }

    main .big a img
    {
        max-height: 14em;
        max-width: 16em;
    }`)

	faviconGzip := []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x0b\x54\x55\xd5\xd6\xff\xef\xf0\x90\x44\x1d\xa8\x81\xc9\xf3\x88\x4a\x80\xf8\x0a\x4b\x21\x4d\x2c\x34\x4b\xa5\x46\x5e\x49\x4d\x02\x31\xd2\xa4\x7f\x69\x9a\xdd\x5b\xf4\x4f\xc5\xa4\x02\xcd\x74\xe4\x97\x61\x64\x5f\xde\x4c\x4b\x0b\xb5\xae\x69\x49\x82\x96\xd7\x21\x43\x43\x2c\xb3\x2c\xd1\x4c\x1e\xbe\xa0\x94\x87\x22\xf3\x1b\x6b\x9d\xb9\xf7\xdd\xe7\x70\xce\xe1\x1c\x1e\x6a\xdf\xb7\x7f\x63\x2c\xb7\x9c\xb3\xf6\x7c\xac\xbd\xf6\x5a\x73\xad\x35\xe7\x3c\x80\x01\x6e\x18\x31\x42\x5c\x7b\x20\xec\x1e\xe0\x5e\x00\x03\x07\x9a\xfe\x5e\x1f\x02\x3c\x7d\x0f\xd0\xa3\x07\xff\xdd\x19\xe8\xf6\x04\xd0\xb9\xb3\xe9\xef\x27\xdc\x80\xbc\x7f\x00\x61\x00\x46\x00\x58\x00\xd3\xe7\x12\x23\xa0\x43\x87\x0e\x1d\x3a\x74\xe8\xd0\xa1\x43\x87\x0e\x1d\x3a\x74\xe8\xb8\x76\x30\x00\x70\x03\xe0\xce\xc5\x8d\x3f\xfb\xdf\x06\x57\x00\xde\x00\x22\x01\x4c\x00\xf0\x2c\x80\x65\x00\xd6\x02\xf8\x14\xc0\xe7\x5c\x3e\xe5\xcf\x96\x71\x9d\x09\x7c\x8f\x37\xd3\xf8\x2b\xc1\x03\x40\x04\x80\xe9\xac\xd3\x21\x00\xe7\x01\xd4\x03\x20\x51\xdc\xdc\xdc\xa8\x43\x87\x0e\xd4\xa9\x53\x27\xf2\xf4\xf4\x24\x57\x57\x57\x52\xbe\xe3\x52\xcf\xf7\x1c\x62\x1a\xd3\x99\xa6\xc7\xf5\x56\xce\x06\x44\xdf\xf5\x03\x90\x04\x20\x17\x40\x19\x80\xab\x8a\x3e\x2e\x2e\x2e\x14\x14\x14\x44\xf1\xf1\xf1\x94\x95\x95\x45\xb9\xb9\xb9\xb4\x7b\xf7\x6e\xda\xb7\x6f\x1f\xe5\xe7\xe7\xd3\x47\x1f\x7d\x44\xe9\xe9\xe9\x34\x66\xcc\x18\xea\xd6\xad\x1b\x19\x0c\x06\xcb\xf6\xb8\xca\x34\x73\x99\x87\xdf\x0d\xf2\xbe\x08\x19\x7a\x02\x48\x03\x50\x0c\xe0\x8a\x56\x6e\xa1\x47\xdf\xbe\x7d\x69\xe9\xd2\xa5\xf4\xf3\xcf\x3f\xd3\x95\x2b\x57\xc8\x1e\x6a\x6b\x6b\xe9\xe0\xc1\x83\xf4\xfc\xf3\xcf\xcb\xf6\xb2\x68\x03\xa5\x5c\x61\x5e\x69\xcc\xfb\x7a\xb5\xc3\x2d\x00\xe6\x01\x38\x0a\xa0\xc1\x52\x4e\xd1\xb7\xe7\xcc\x99\x43\x27\x4e\x9c\xb0\xab\xb3\x35\x34\x34\x34\xd0\xa1\x43\x87\x68\xf2\xe4\xc9\xd4\xae\x5d\x3b\x5b\xed\xd0\xc0\xbc\xe7\xb1\x2c\xd7\x0a\xed\x00\x3c\x08\x60\xaf\xb6\x8f\x6b\x8b\x9f\x9f\x1f\xad\x5d\xbb\xd6\xea\xf3\xbe\x7c\xf9\x32\x95\x97\x97\xd3\x8f\x47\x8f\x52\x71\x71\xb1\xec\x17\xe7\xce\x9d\xa3\xfa\xfa\xfa\x46\x75\x2f\x5e\xbc\x48\x19\x19\x19\xb2\x2d\x6d\xb4\x81\xf2\x6e\xec\x65\x99\xda\xb5\xb1\xee\xe2\xbd\x5b\x0e\xe0\x0f\x5b\xf2\xf8\xfa\xfa\xd2\xe6\xcd\x9b\x1b\xe9\x52\x51\x51\x41\x1f\xae\x5f\x4f\x29\xd3\xa7\xd3\xf0\x98\x18\xea\x37\x60\x00\xf5\x89\x88\xa0\x01\xb7\xdd\x46\xb1\x23\x47\xd2\xac\xd9\xb3\xe9\xf3\x7f\xfd\x8b\xfe\xf8\xe3\x0f\xb3\xfb\x44\x1b\xae\x58\xb1\x42\x8e\x97\x76\xda\x80\x58\xa6\xe5\x2c\x63\x5b\x20\x1a\xc0\x6e\x6b\x7d\x5d\x29\x42\xc6\x35\x6b\xd6\x34\x7a\xde\x5b\xb7\x6e\xa5\xfb\xc7\x8c\xa1\xc0\xa0\x20\xba\xc5\xd7\x97\x7c\xfd\xfd\xc9\x2f\x20\x40\x2d\xdd\xfd\xfc\xe4\xe7\x3d\x7a\xf6\xa4\xc9\x53\xa6\xd0\xde\xbd\x7b\xe5\x3b\xa0\xa5\x91\x96\x96\x26\xc7\xd1\x26\xda\xa0\x81\x65\x8c\x6e\x45\xbd\xc5\xfc\x3b\x11\x40\x49\x13\xbc\xe9\xc9\x27\x9f\xa4\xba\xba\x3a\x55\xee\xea\x9a\x1a\x5a\xfa\xfa\xeb\x14\x12\x1a\x2a\x75\xf4\x0f\x0c\x6c\xb2\x88\x7a\x03\x23\x23\x69\xfd\x86\x0d\x74\xf5\xea\x55\x95\x96\x78\x47\x46\x8f\x1e\xdd\x94\xfe\x4a\x29\x61\x99\x5b\x6a\x3b\x08\xdb\xec\xff\xf1\x5c\x6c\x97\x67\x48\x48\x08\x1d\x3d\x7a\x54\x95\x57\xbc\xcf\xcb\xde\x78\x83\x8c\xc1\xc1\xf2\x19\x3b\xa2\xbb\x52\x44\xff\x08\xeb\xd3\x87\x3e\xf9\xf4\x53\xb3\xbe\xf4\xd5\x57\x5f\x51\xe7\xce\x9d\x1d\x6d\x83\xf3\x2c\xbb\x7b\x0b\x74\x17\x63\xeb\x45\x47\xf8\xcd\x9f\x3f\xdf\x4c\xd6\x2f\xb6\x6f\xa7\xd0\xf0\x70\xa7\x75\xd7\xb6\x41\x54\x74\x34\x1d\xfe\xfe\x7b\x95\xa6\xe8\x5b\x13\x27\x4e\x74\x54\x7f\x62\xd9\xe7\x35\xa3\x0d\x44\xbf\x79\xc6\x51\xdd\x7d\x7c\x7c\xe8\xc0\x81\x03\xaa\x9c\x17\x2e\x5c\xa0\x87\xc6\x8f\x77\xb8\xcf\xdb\x7b\x17\x9e\x99\x3b\xd7\x6c\x1e\xf9\xf8\xe3\x8f\xed\xcd\x89\xb6\xda\xe0\x19\x27\xdf\x85\x64\x00\x55\x8e\xf2\x18\x39\x72\x24\x5d\xba\x74\x49\x95\xf1\xb3\xcf\x3f\x97\x63\x59\x4b\x74\x17\x45\xf4\x9d\xfe\x03\x07\x52\xf1\xe1\xc3\x2a\xed\x93\x27\x4f\x52\xef\xde\xbd\x9d\xd1\x9f\x58\x97\x64\x07\x75\x1f\x0d\xa0\xd4\x19\xfa\xcf\x3d\xf7\x9c\x2a\x9f\x18\xb7\x9f\x9d\x37\x4f\x8e\xe7\x2d\xd5\x5f\xbe\x07\x01\x01\x94\xbd\x7a\xb5\xd9\x3b\x10\x17\x17\xe7\xac\xfe\xc4\x3a\x8d\x6e\x42\xf7\x30\x5e\x73\x38\x45\x3b\x3b\x3b\x5b\x95\x4f\xcc\xdf\xe3\xe2\xe2\x5a\xdc\xf7\x95\x22\xda\xf1\xe9\x59\xb3\xcc\xe6\xc3\x59\xb3\x66\x35\x47\x7f\x62\xdd\xc2\x6c\xe8\xee\x05\x60\xa3\xb3\x34\xc5\xda\x6d\xd3\xa6\x4d\xaa\x6c\xa5\xa5\xa5\x74\xe7\xb0\x61\x72\xfc\x6a\x0d\xfd\x45\x3b\x4e\x9c\x34\x49\xae\x0d\x14\x2c\x5a\xb4\xa8\xb9\xfa\x13\xeb\xe8\x65\x45\xff\x50\x47\xe6\x78\xcb\x22\xd6\xb2\x5a\x7b\xef\xd4\xa9\x53\x34\x24\x2a\xaa\x55\xf5\x1f\x3f\x61\x02\x55\x57\x57\xab\x3c\x5e\x7d\xf5\xd5\x96\xe8\x5f\xc2\xba\x5a\xc3\x2c\x00\x75\xce\xd0\x13\x36\xd9\x87\x1f\x7e\xa8\xca\x76\xe6\xcc\x19\x8a\xb9\xfb\x6e\x55\x7f\xc5\xbe\x13\xa5\x39\x73\xa1\xe8\xff\x89\x49\x49\xd2\x06\x54\xf0\xe2\x8b\x2f\x36\x57\xf7\x3a\xd6\xd1\x16\x3c\x01\xac\x76\x96\xee\x92\x25\x4b\x54\xd9\x44\x3f\x7d\x64\xca\x14\xa9\xaf\x68\x03\x61\xfb\xdd\x3f\x76\x2c\x8d\x1d\x37\x4e\xda\x03\xce\xf6\x0b\xa1\xff\x4b\x16\xb6\xc5\xb4\x69\xd3\x9a\xab\xff\x6a\xd6\xd1\x1e\x7c\x01\x6c\x77\x86\x6e\x72\x72\xb2\xd9\xf8\x24\x6c\x5e\x21\xf7\x1d\x43\x86\xd0\x67\x9f\x7d\x26\xc7\xc4\x3f\xff\xfc\x93\x76\x7c\xf9\x25\x0d\x75\x72\x6c\x08\xea\xd1\x83\xb6\x6c\xdd\x6a\x36\xbe\x0e\x1d\x3a\xb4\x39\xba\x6f\x67\xdd\x1c\x81\x18\x23\xf7\x39\x4a\xbb\x7f\xff\xfe\x72\x4d\xab\xa0\xa8\xa8\x48\xae\xef\xfe\xeb\xad\xb7\xc8\x12\x6b\xff\xf9\x4f\x0a\x34\x1a\x1d\x7e\xf7\x47\x8e\x1a\x45\x65\x1a\xda\x07\x0f\x1e\x94\xf6\x96\x93\xba\xef\xb3\x33\xee\xdb\xc2\x6d\x00\x0e\x38\x42\xff\xa6\x9b\x6e\x32\x1b\x03\x85\xbd\xb6\xe8\xe5\x97\x69\xcf\x37\xdf\x34\xd2\xff\xbb\xa2\x22\x69\xdb\x3b\x32\x16\x88\x76\xca\x79\xf7\x5d\xb3\xfb\x5f\x7b\xed\x35\x67\x75\x3f\xc0\xba\x34\x07\x91\x00\xf6\x3b\xc2\x27\x3e\x3e\x9e\x6a\x6a\x6a\x54\x39\x7f\xfb\xed\x37\x3a\xf6\xcb\x2f\x8d\xf4\x17\xef\x40\x70\xaf\x5e\x0e\x3d\xfb\xc7\x52\x52\xa8\xaa\xaa\x4a\xbd\x57\xcc\xad\x83\x06\x0d\x72\x46\xf7\xfd\xac\x43\x4b\xd0\x07\xc0\x57\x4d\xf1\xea\xd4\xa9\x93\x59\x1f\x10\xe3\x81\x58\x03\x8a\x35\xac\x32\x36\xfc\xfe\xfb\xef\xf4\x48\x42\x82\xdd\xf7\x5f\x99\x2f\xc4\x9c\x77\xfc\xf8\x71\xb3\xb6\x13\xe3\xac\x03\x7b\x00\x4a\xf9\x8a\x65\x6f\x0d\xf8\x03\x78\x0f\xc0\x65\x7b\x3c\x87\x0c\x19\xd2\x68\xbf\x4f\xac\x0b\xc4\x33\x5f\x9c\x91\x41\xa3\x46\x8f\x6e\x52\x6f\x31\xde\xcd\x98\x39\x93\x4a\x2c\xe8\xec\xdb\xb7\xcf\xde\x9e\xa8\xb6\x5c\x66\x59\xfd\x5b\x49\x77\x05\x1d\xf9\x6c\xa2\xdc\x1e\xff\xc4\xc4\x44\xaa\xac\xac\x34\x93\xbd\xb4\xac\x8c\xde\x58\xbe\x5c\xda\x05\xc6\xe0\x60\x75\xbf\x47\x29\xe2\xef\x5e\x21\x21\x14\xf7\xe0\x83\x72\x8f\x4c\xcc\x15\x5a\x94\x94\x94\xd0\xf0\xe1\xc3\x1d\xd1\xbd\x9c\x65\xec\xd8\xca\xba\x2b\x70\x01\x10\x03\x20\x4f\x7b\x9e\xa1\x2d\xc2\x1e\x9e\x39\x73\x26\x9d\x3f\x7f\xde\x4c\x07\xf1\x0e\x94\x95\x95\xd1\xb6\x2f\xbe\xa0\xd7\x32\x33\xe9\xe9\xd9\xb3\x69\xc6\x13\x4f\xd0\x9c\xb9\x73\x69\xf9\x8a\x15\x94\x5f\x50\x20\xd7\xcd\x96\x10\xef\xc0\x98\x31\x63\x9a\xd2\xbb\x9e\x65\x8a\x61\x19\xdb\x1a\x37\x73\x3b\xff\x62\xab\x0d\x26\x4c\x98\x40\x3f\xfe\xf8\x63\x23\x7d\xb4\xed\xa1\x1d\x1b\xac\x7d\xbf\x67\xcf\x1e\x47\xe6\xfa\x5f\x58\x96\x9b\xaf\x81\xde\x5a\x18\xd8\x8e\xce\x02\x70\xd2\xda\xbe\x68\x58\x58\x18\xbd\xfd\xf6\xdb\x74\xf6\xec\x59\x9b\xed\x60\x4d\x6f\xb1\xc6\x4f\x4f\x4f\x97\x7b\xc9\x36\x74\x6e\x60\x9e\x59\x2c\xc3\xf5\x3c\x0b\x12\xfd\x2d\x9c\x5d\xad\x0f\x59\x8e\x91\xee\xee\xee\x34\x78\xf0\x60\xca\xcc\xcc\xa4\xc2\xc2\x42\xf9\x5e\x58\xee\xf5\x0b\xdb\xbe\xa2\xa2\x82\x0a\x0a\x0a\xe8\x85\x17\x5e\xa0\xf0\xf0\x70\x5b\xe3\xfc\x65\xe6\xb1\x80\x79\x5e\x8b\xbe\xee\x28\xc4\x33\xe8\x0e\x20\x1e\xc0\x1a\x00\x3f\x02\xa8\x51\x64\x37\x18\x0c\xd4\xa5\x4b\x17\x8a\x8c\x8c\xa4\xf1\xe3\xc7\xd3\x8c\x19\x33\xe8\xa9\xa7\x9e\xa2\x94\x94\x14\xb9\x9f\x11\x11\x11\x41\x1d\x3b\x76\xb4\xa6\x73\x0d\xd3\x5a\xc3\xb4\xbb\xdf\x20\x67\x7f\xf6\xe0\xca\xe7\x10\xa3\x01\xbc\x00\x60\x03\x80\x42\x00\xbf\x01\xa8\x04\x50\xcb\xe7\x78\x57\xb9\x5c\xe1\xcf\x2a\xb9\x4e\x21\xdf\xf3\x02\xd3\xf0\xfb\x0b\x9e\x83\x6b\x21\x64\xef\xcc\xe7\x95\x77\x00\x18\x05\xe0\x21\x00\x0f\x73\x79\x88\x3f\xbb\x83\xeb\x74\xfe\x8b\xeb\xab\x43\x87\x0e\x1d\x3a\x74\xe8\xd0\xa1\x43\x87\x0e\x1d\x3a\x74\xdc\x50\x70\x78\x63\xae\xf5\x51\x6b\x94\x97\x06\x40\x1e\xef\x56\x02\x5e\xe2\xba\x00\x30\x98\x3e\x96\x5f\xd4\x8b\x6b\x8c\xfc\x5a\x56\x28\x11\x57\x0f\x59\x4d\x56\x64\x35\x1a\x4c\xd7\xf9\xf5\xa6\x6b\x4c\xad\xe9\x6a\xac\x34\x5d\xbd\x94\x6b\x89\xe9\xea\xb1\xcb\x74\x75\xb5\xbc\x2a\xdf\x2b\xf5\x15\x3a\x0a\x5d\x85\x8f\xc2\x57\x95\x43\x12\x70\xfd\x8f\x7c\xf2\x46\xe3\x7f\xe4\x27\xa5\xb5\x77\xc9\x6a\xb2\x82\xa9\x01\x16\x18\xae\xe3\x43\x08\x03\x30\x10\xc0\x54\x6d\x9e\x88\xde\xad\xd2\xb5\x74\xe8\xd0\xa1\x43\x87\x0e\x1d\x3a\xda\x02\x2e\x1c\x13\xe9\xc9\xc5\xe3\x06\x3b\x13\xd5\xc2\x8d\x7d\x52\xee\x01\xf0\x24\xc7\xba\x6e\x60\xbf\xbc\x7c\x2e\xdb\xf9\xb3\x65\x5c\xe7\x1e\xbe\xc7\xed\x3a\xc9\x6c\x00\x10\x00\xe0\x51\x00\x1f\x00\xf8\x09\x40\xb5\x8b\x8b\x0b\x75\xef\xde\x9d\x86\x0d\x1b\x26\x63\xf4\x52\x52\x52\x68\xca\x94\x29\x34\x62\xc4\x08\x0a\x08\x08\xd0\xc6\xb3\x56\xf3\x3d\x1f\x30\x8d\x80\x6b\x74\x76\xeb\xc2\xf1\xb2\x19\x7c\x76\x2c\xe3\x32\x85\xdc\x83\x06\x0d\xa2\xe5\xcb\x97\xd3\x0f\x3f\xfc\x20\xe3\xeb\x14\xff\x0b\x71\xad\xae\xae\x96\xf1\x78\xd9\xd9\xd9\x74\xd7\x5d\x77\x49\xdf\x66\xcd\x39\xf4\x15\xa6\x95\xc1\xb4\xdb\xaa\x9f\x05\x02\x58\xc4\xfe\x0d\x2a\x7f\x2f\x2f\x2f\xe9\xf7\x5b\x5a\x5a\xea\x90\x5d\x7f\xee\xdc\x39\x19\x6b\xdb\xad\x5b\x37\x6b\x67\xea\x27\x99\x47\x60\x2b\xca\xed\x0e\xe0\x6f\x00\x0e\x5a\xfa\x82\xf8\xf8\xf8\xd0\xfb\xef\xbf\xaf\xfa\x3d\x88\xb6\x3e\xf5\xfb\xef\xb4\x79\xcb\x16\xe9\x0b\x94\xf6\xe2\x8b\xf4\xca\xab\xaf\xd2\xc6\x8d\x1b\xe9\x78\x49\x89\x1a\xf7\x25\xea\x6d\xd9\xb2\xc5\x96\xdf\x57\x03\xf3\xfa\x5b\x0b\x62\x9c\x14\x78\xb3\x2f\x49\xa3\xb8\x46\x4f\x4f\x4f\xd9\x1f\x94\x7e\x52\x59\x59\x29\xfd\x5a\xef\x8a\x89\xa1\x20\xa3\x51\xf5\xe5\x12\xd7\x80\xa0\x20\x19\xb3\x94\x99\x95\x45\x15\x67\xce\xa8\xcf\x62\xd3\xa6\x4d\xd4\xb5\x6b\x57\x5b\xbe\x2c\x7f\x30\x6f\xef\x66\xca\xde\x0b\xc0\x66\x5b\xb1\xa8\xd3\xa7\x4f\x57\x63\xf2\xca\xcb\xcb\x69\x66\x6a\xaa\x94\xd3\x96\x0f\xa2\x12\x9b\x38\x25\x21\x41\xfa\x9d\x09\x88\xe7\x91\x96\x96\x66\xcf\x07\xe9\x2a\xcb\xd0\xcb\x49\xd9\x23\x38\x5e\xd1\x2a\xdd\xc0\xc0\x40\x19\x07\x2c\x20\xde\xcd\x39\x73\xe7\x3a\xec\x3b\x2d\x9e\x47\xf2\xb4\x69\x74\x81\x7d\xf1\x4e\x9c\x38\x21\x7d\x4c\x9a\xf0\xa5\xda\xcd\x32\x39\x82\x70\x8e\xbb\xb5\x49\xef\xf1\xc7\x1f\x57\xfb\x72\xee\xe6\xcd\xd2\xef\xd5\x99\x18\x00\xf1\x9c\xb4\xfe\xbf\x4d\x3c\x03\xa5\xec\x65\xd9\xec\x41\xbc\xf7\x3b\xed\xd1\x11\x63\xdf\x86\x0d\x1b\x24\xdf\x9a\x9a\x1a\x4a\x78\xf4\x51\xa7\x63\x9a\xc4\x33\x18\x33\x6e\x9c\xea\xd7\x97\x97\x97\xe7\x48\x1c\x2f\xb1\x6c\xb6\xc6\xa6\x4e\x9c\x13\xc1\x2e\x0d\x6f\x6f\x6f\xb5\xef\x88\x31\x7d\x60\x64\xa4\xd3\xf1\x17\xa2\xfe\xad\x61\x61\xb4\xbf\xb0\x50\xed\x43\xc1\xc1\xc1\x8e\xc8\x4f\x2c\x63\x27\x0b\xd9\xc5\xdc\xf7\x0f\xcb\x3c\x01\xd6\x4a\xcf\x9e\x3d\xa5\x0f\xb5\xc0\xee\x3d\x7b\xa8\x67\xef\xde\x4e\xc7\x8e\x28\x7d\x28\x97\xfd\x92\xc5\x73\x88\x8c\x8c\x74\x54\xfe\x2b\x2c\xab\x76\xbe\x6e\x07\x60\x9d\x23\xf7\x87\x84\x84\xd0\xe9\xd3\xa7\x25\xdf\xaf\xbf\xfe\xda\x2c\x1e\xd0\xd9\xe7\xf0\xf1\xc6\x8d\x92\x4e\x55\x55\x95\xf4\xa5\x73\x50\x7e\x62\x59\x2d\x63\xe2\xfb\x03\x38\xd2\xd4\xbd\xfe\xfe\xfe\xb2\xdf\x08\x1c\xfc\xee\x3b\xe9\xb3\x2f\xc6\x9e\x40\xa3\x91\xc2\x23\x22\xa4\x9f\xb2\x23\x7a\x08\xbd\x77\xe6\xe5\xa9\xe3\x6f\x9f\x3e\x7d\x1c\x95\xfd\x08\xcb\x6a\x0d\x0f\x00\xa8\xb0\x77\xbf\x98\xb7\xf2\x98\xef\xd9\xb3\x67\x65\x8c\x7d\xdf\xfe\xfd\x65\x7c\x7a\xf1\xe1\xc3\x32\x0e\x23\xf2\xf6\xdb\xed\xea\x20\xf4\x1d\x1c\x15\xa5\xce\x03\x45\x45\x45\xf2\xbd\x72\x40\xf6\x0a\x96\xd1\x16\x44\x9f\x4a\x69\x2a\xc6\x74\xf1\xe2\xc5\xea\xd8\x97\xf1\xca\x2b\xb4\x70\xd1\x22\x33\x1b\x67\xc9\xd2\xa5\x76\xe7\x03\x31\x5e\x3d\x3b\x6f\x9e\x6a\x77\xbc\xf3\xce\x3b\xd6\x72\x8b\x58\x96\x2a\x96\xad\x29\x3b\xd5\x95\x6d\xf4\x4a\x5b\xb4\xa2\xa3\xa3\x55\xdf\xd7\x5f\x7f\xfd\xb5\x51\x3c\xc8\x07\xeb\xd6\xd9\x1d\x3b\x45\xdb\x17\x17\x17\xcb\xba\x97\x2e\x5d\xa2\x71\xe3\xc6\x35\x25\x7b\x25\xcb\xe4\xa8\xef\x9c\x2b\xc7\xc5\x96\x59\xa3\xe7\xee\xee\x4e\xab\x39\xf6\x54\xd8\x3f\x62\x1e\x50\x62\x1a\x44\x5f\x7e\x34\x29\xc9\x6a\xfb\x0b\xd9\x23\xfa\xf5\xa3\x4f\x35\xf1\xeb\xe2\xff\x4d\x8c\xfd\x65\x2c\x8b\xb3\x7e\x7f\xe2\x39\xdd\xcf\x39\x51\x1a\xd1\x0d\x0d\x0d\x55\xe7\x01\xc5\x7e\x13\x7d\x7f\x6c\x5c\x1c\x75\xf7\xf7\x97\xf2\x2b\x45\xf4\x17\xf1\x3e\xc4\x8e\x1a\x25\xfd\xd4\x95\xb9\xfb\xf8\xf1\xe3\x4d\x8d\x3b\xc5\x2c\x43\x4b\xd6\x36\x61\x00\x3e\x64\x3f\x50\x33\xfa\xb1\xb1\xb1\x66\xb1\x20\x62\x5c\x5d\xf3\xde\x7b\x94\x38\x75\xaa\xcc\xa5\x71\xfb\xe0\xc1\x34\x6c\xf8\x70\x19\x77\xf7\x76\x76\xb6\x8c\xc1\x54\x50\x56\x56\x26\x7d\xd1\x6d\xc8\x5d\xcb\x3c\x9d\x8d\x8d\xb2\x85\x0e\x00\xa6\x71\x7b\x98\xad\x01\x62\x62\x62\x68\xff\xfe\xfd\x66\xfe\xee\xc2\x2e\x2d\xaf\xa8\xa0\x13\x27\x4f\x4a\x39\x6b\x34\x31\xae\x02\x62\x8d\x16\x17\x17\x67\xed\x9d\x6d\x60\x1e\xd3\x98\x67\x6b\x23\x88\xf3\xeb\x1c\xd1\xc6\x39\x88\x75\x48\x46\x46\x86\x7c\x16\xda\xdc\x14\x5a\xc8\xb5\xcd\xa9\x53\x32\x67\xc9\xad\xb7\xde\x6a\x29\x77\x3d\xd3\x4c\x63\x1e\x6d\x09\x03\xdb\x50\x33\x00\x7c\x01\xe0\x8c\x68\x37\xb1\x06\xee\xd5\xab\x97\x8c\x59\x5c\xb5\x6a\x15\x6d\xdb\xb6\x4d\xfa\x9d\xef\xd8\xb1\x83\x72\x72\x72\x64\xec\x46\x78\x78\xb8\x76\x0d\xdf\xc0\xf7\x7e\xc1\xb4\x02\xaf\x83\xff\x75\x7b\x3e\xa6\x12\xfc\x73\x00\x7c\x0b\xe0\xb8\xc1\x60\x38\xef\xe1\xe1\x71\xa9\x43\x87\x0e\xb5\x1e\x1e\x1e\xb5\x06\x83\xe1\x12\xe7\xbd\x38\xce\x75\x72\xf8\x9e\x81\x4c\xe3\x46\x80\x0b\xdb\x85\x46\x8e\xcb\x1b\x0e\x53\x8a\xf7\x7b\xf9\xff\xb7\xf1\x77\x9d\x6e\xe0\xbd\x2c\x1d\x3a\x74\xe8\xd0\xa1\x43\xc7\xff\x01\x98\xac\xdb\xb6\xb8\x56\x7a\x99\xae\x5c\xa4\x5b\x14\x40\x25\x80\x87\xb8\x4a\x77\x29\x93\x21\x2a\xfe\x31\xb9\x85\x99\x0c\x69\xc4\x98\x16\x30\xc2\x5a\x32\xb9\x87\x99\x92\xbb\xc0\x03\x30\xb9\x63\x99\x02\x25\x85\xb5\xaa\x5c\x95\xcf\x95\x7a\xca\x55\xb9\x5f\xa1\xa7\xd0\x57\xf8\x9a\xdc\xd2\x34\x72\x49\x77\x35\x93\xe3\xd9\x7c\x29\xfb\x2e\xd7\xb6\x69\x1f\xd3\x55\x2c\xd0\x7a\xf0\x4f\xf8\xa8\x7e\x5a\x9d\xaf\x75\x2f\xd0\xa1\x43\x47\x1b\xc0\x95\xfd\x17\xbc\xb8\x78\xb6\x71\xfc\xab\x0b\xc7\x14\x8f\x03\xb0\xd0\x60\x30\x6c\xf0\xf2\xf2\xca\xf7\xf3\xf3\xdb\xef\xed\xed\xbd\xdf\xdd\xdd\x3d\x9f\xfd\x10\x16\x72\x1d\xbf\x56\x5a\x8b\xba\x01\xb8\x1d\xc0\xeb\x00\x8e\xb8\xb9\xb9\xd5\x45\x47\x47\xcb\xbc\x26\xf9\xf9\xf9\x72\xaf\xb3\xb0\xb0\x90\xd6\xad\x5b\x47\x09\x09\x09\xca\x99\x69\x1d\xef\x99\xbc\xce\xf7\x36\xd7\x17\xa2\x27\x80\x37\x94\xfc\x1d\x5e\x5e\x5e\xf4\xf2\xcb\x2f\xab\x79\x2a\x2a\x2b\x2b\xe5\x3e\x77\x69\x59\x99\xcc\xdf\x53\x5f\x5f\x4f\x5f\x7e\xf9\xa5\x65\xbe\x99\x72\xa6\xd1\xd3\x09\xbe\xae\x9c\x9b\x57\xcd\xab\xd7\xbe\x7d\x7b\x7a\xf3\xcd\x37\xe5\x1e\x52\xc9\x89\x13\x94\xbe\x68\x91\xdc\x9f\xbf\x2d\x32\x52\x9e\x1f\x27\x3f\xf6\x18\xed\xdc\xb9\x53\x7e\x2f\xda\x64\xc0\x80\x01\x96\xfb\x48\x87\x98\x66\x53\x7d\xa4\x1d\x80\xd9\x96\xf9\x4b\xa7\x4e\x9d\x4a\x97\xeb\xea\xe8\xfb\x1f\x7e\x90\xb9\xb9\xb4\xf9\xc9\x94\x7d\xd0\xb0\x3e\x7d\xd4\xb3\xc7\xdc\xdc\x5c\x6b\xb1\xf9\xe7\x99\xb6\xad\x9c\xc3\xee\x00\x9e\x67\x1f\x10\xf5\xbe\x2e\x5d\xba\xd0\x37\xdf\x7c\x23\xcf\x73\x13\x93\x92\x6c\x9e\x29\x0a\x39\x22\xfa\xf5\x93\xb9\x70\x6b\x6b\x6b\x69\xec\xd8\xb1\xd6\xf6\x2f\xab\x99\x87\xe5\xf9\xbf\x01\xc0\x4c\x6b\xf9\x3b\xef\xbc\xf3\x4e\xb9\x97\x9e\x5f\x50\x20\x73\xae\xd8\x3b\xff\x50\xce\x0f\x04\x96\x2d\x5b\x66\x6b\x0f\xf5\x22\xf3\xd2\xee\x89\xc5\xda\xca\x13\x33\x79\xf2\x64\x49\xef\xad\xb7\xde\x6a\xf2\x2c\x5b\x39\x3f\x15\x6d\xb5\x75\xeb\x56\xb9\x1f\x6f\x43\x86\x72\xe6\xa9\x20\xd1\x56\x1e\xbb\xc4\xc4\x44\xc9\x7f\xf9\x8a\x15\x26\xbf\x05\x7f\x7f\x59\xac\xb5\x83\xe0\x7f\xef\x7d\xf7\x49\x3f\x99\x6d\xdb\xb6\xd9\xcb\x3b\x5a\xc7\x3c\x15\xb4\x07\xb0\xd2\x5a\x4e\x90\x51\xa3\x46\xc9\x7c\x17\x9b\xb7\x6c\x91\xe7\x51\xa2\xef\x2f\xce\xc8\x90\xcf\xda\x52\x06\x21\xdf\x63\x29\x29\x52\xde\x9c\x9c\x1c\x5b\xbc\x1b\x98\x97\xe5\xfe\x9e\x37\x80\xf5\x96\xf5\xfd\xfd\xfd\x65\x5e\x96\xd3\xa7\x4f\xd3\x9b\x2b\x57\xca\x3d\xe8\x86\x86\x06\x9a\x3d\x67\x8e\x59\x5f\x14\xb2\x18\x83\x83\x69\xd3\x27\x9f\x48\xfe\xc9\xc9\xc9\xb6\xf8\xaf\xb7\xe3\xbb\x71\x0b\x9f\x03\x9b\xe5\xca\x59\xb8\x70\xa1\xe4\x79\xe1\xc2\x05\x35\x1f\xf8\x23\x09\x09\x6a\xce\x4c\xc5\x07\x63\xee\xbc\x79\xf2\xcc\xe5\xc0\x81\x03\x32\xa7\xb8\x95\xbd\xe4\xb5\x0e\xe4\x3e\x17\x56\xe2\x62\xed\x59\x9b\xaf\xaf\xaf\x7a\x36\x58\x5a\x5a\x2a\xf3\xeb\x85\x86\x87\xcb\xb3\x62\xa1\xf3\x90\xa8\x28\xca\x5a\xb2\x44\x8e\x89\x62\x7c\x1c\x3f\x7e\xbc\x25\xef\x2a\xa6\xe9\xa8\x05\xea\xc6\xe7\x81\xdf\x2a\x6d\x11\x16\x16\x46\xdb\xb7\x6f\x97\x63\x9c\xe0\xb3\xf7\xdf\xff\x96\x67\x44\xdb\x77\xec\x90\xf9\x5f\x88\x73\x49\x26\x25\x25\x69\x73\xa1\xd4\x33\x8d\x07\x9a\x39\x0f\xf8\x00\x48\x65\x1f\x89\x6a\x6f\x6f\x6f\x9a\x3d\x7b\xb6\x1c\x63\x84\x9e\xa2\x2f\x88\xb1\xe1\xd8\xb1\x63\x32\x6f\x8d\x18\xfb\xf9\xec\xa1\x9a\xef\x49\x65\x1a\x2d\x45\x17\x00\xf7\x01\xc8\x04\xb0\xb3\x6b\xd7\xae\xc7\x22\x23\x23\xcf\xc4\xc6\xc6\x56\x0d\x1d\x3a\xb4\xca\x68\x34\x9e\x71\x73\x73\x3b\xc6\x7e\x10\x99\x5c\xb7\x4b\x2b\xf0\xb5\x86\xf6\xec\x63\xd8\x17\xc0\x60\x2e\x7d\xf9\xb3\x1b\x65\xcf\x5c\x87\x0e\x1d\x0e\xc0\xea\xa1\xa4\x82\x5a\xa3\x8c\x36\x6b\x30\xc5\xc9\xc5\x54\x9a\xe2\xe1\x3c\x76\x01\xae\x0b\x00\x83\xb6\xec\x32\xc5\xc2\x79\x54\x9a\x62\xe0\x8c\x72\x9b\x63\x81\x81\xa8\xc4\xc3\x2e\x8b\x30\x9e\x14\x7a\x68\xf7\x29\xae\x97\xf7\xf2\xb5\x87\x81\xd7\x6e\xde\x5c\x3c\x1d\x3c\x2b\x15\x36\xf4\x5d\x1d\x3b\x76\xcc\x8a\x8f\x8f\xcf\xcb\xcc\xcc\x3c\x3c\x7f\xfe\xfc\xc3\x51\x51\x51\x79\x2e\x2e\x2e\x59\xe2\x3b\x3b\x76\x76\x30\x80\xec\xf6\xed\xdb\x5f\x48\x4f\x4f\x97\xeb\x06\x61\xdb\xbd\x93\x93\x43\xbb\x76\xed\x52\xce\xfe\x2f\x88\x3a\x5c\x57\x8b\xfe\x3c\x9f\xd2\xc4\x87\x1f\x96\xeb\x9d\xdb\x07\x0f\x56\x7f\xa3\xe2\xe1\x49\x93\xa4\x9d\xac\xc9\xb7\xfe\xad\xc6\x27\xc9\x08\xa0\x40\xb1\x09\x56\xad\x5a\x25\x6d\xa8\x9b\x7d\x7c\xcc\xec\xb8\x0f\xd6\xad\x93\xbe\xe1\x1a\xdb\xa1\x80\xef\x0d\x05\x50\xa4\x7c\xbe\x7a\xf5\x6a\x7a\xee\xef\x7f\xa7\x07\x1e\x7c\x50\xfa\xdc\x29\x6b\x91\xff\x7e\xff\x7d\xb9\x5e\xd1\xdc\x5f\xa4\xc9\xdf\x3c\x82\x7f\x03\x46\xda\x67\x47\x7f\xfa\x49\x96\xbb\x63\x63\xc9\xbb\x5b\x37\x99\x6f\xb2\x60\xf7\x6e\xea\xd7\xaf\x9f\x72\xef\x51\x2b\xbf\x82\x3d\x08\xc0\xe7\x5e\x5e\x5e\x75\xc2\xc6\x2c\x2a\x2a\xa2\xff\xff\xd2\x4b\x32\x7f\xab\x58\x93\xa6\xa6\xa6\x0a\x1b\xa0\x8e\x7f\xa7\x6a\x90\x8d\x67\x20\xd6\xec\x93\x7c\x7c\x7c\x36\xa4\xa6\xa6\x1e\x79\xf7\xdd\x77\xcb\x56\xae\x5c\x59\x16\x17\x17\x77\xa4\x5d\xbb\x76\x62\x1d\x3d\xc9\x46\xce\x6d\x4b\xb8\xb3\x3d\x17\xca\xe5\x96\x56\xf0\x6d\xbe\x21\xa1\xdd\xf3\xad\x35\x02\x25\x1e\xc0\x2e\x57\x60\x81\xe6\x6d\x11\xff\x17\x9f\x89\xef\x44\x1d\xed\x3d\xff\x13\x00\x00\xff\xff\x42\xb2\xaa\x87\x26\x7d\x00\x00")
	faviconData, _ := unzip(faviconGzip)
	embeddedFiles[faviconImage] = faviconData

	memoryFs = afero.NewMemMapFs()
	mmfile, _ := memoryFs.Create("video.svg")
	_, _ = mmfile.Write(embeddedFiles[videoImage])
	mmfile, _ = memoryFs.Create("audio.svg")
	_, _ = mmfile.Write(embeddedFiles[audioImage])
	mmfile, _ = memoryFs.Create("pdf.svg")
	_, _ = mmfile.Write(embeddedFiles[pdfImage])
}
